// /api/analyze.ts - v5.3 mit intelligenterer Mobile-Optimierungs-PrÃ¼fung

import { NextApiRequest, NextApiResponse } from 'next';

import { kv } from '@vercel/kv';

import * as cheerio from 'cheerio';



// --- UMWELTSVARIABLEN ---

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

const BROWSERLESS_API_KEY = process.env.BROWSERLESS_API_KEY;



if (!GEMINI_API_KEY || !BROWSERLESS_API_KEY) {

Â  Â  throw new Error("Erforderliche Umgebungsvariablen sind nicht gesetzt.");

}

const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}`;



// --- DATENERFASSUNG (BEHÃ„LT <HEAD> UND <BODY>) ---

async function getCleanedPageContent(url: string): Promise<string> {

Â  Â  try {

Â  Â  Â  Â  const browserlessUrl = `https://production-sfo.browserless.io/content?token=${BROWSERLESS_API_KEY}`;

Â  Â  Â  Â  const response = await fetch(browserlessUrl, {

Â  Â  Â  Â  Â  Â  method: 'POST',

Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },

Â  Â  Â  Â  Â  Â  body: JSON.stringify({ url: url }),

Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {

Â  Â  Â  Â  Â  Â  const errorText = await response.text();

Â  Â  Â  Â  Â  Â  throw new Error(`Browserless API Fehler! Status: ${response.status}. Details: ${errorText}`);

Â  Â  Â  Â  }

Â  Â  Â  Â  const html = await response.text();

Â  Â  Â  Â  const $ = cheerio.load(html);

Â  Â  Â  Â  $('script, style, noscript').remove();

Â  Â  Â  Â  const fullCleanedHtml = $.html() || '';

Â  Â  Â  Â  const condensedHtml = fullCleanedHtml.replace(/\s+/g, ' ').trim();

Â  Â  Â  Â  return condensedHtml.substring(0, 40000);

Â  Â  } catch (error) {

Â  Â  Â  Â  console.error(`Fehler beim Abrufen der URL ${url} via Browserless:`, error);

Â  Â  Â  Â  throw new Error("Die Webseite konnte nicht vollstÃ¤ndig geladen werden.");

Â  Â  }

}



// --- API-HANDLER ---

export default async function handler(req: NextApiRequest, res: NextApiResponse) {

Â  Â  res.setHeader('Access-Control-Allow-Origin', '*');

Â  Â  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');

Â  Â  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');



Â  Â  if (req.method === 'OPTIONS') { return res.status(200).end(); }

Â  Â  if (req.method !== 'POST') { return res.status(405).json({ message: 'Methode nicht erlaubt.' }); }



Â  Â  let { url } = req.body;

Â  Â  if (typeof url !== 'string' || !url.trim()) { return res.status(400).json({ message: 'Bitte gib eine URL ein.' }); }

Â  Â  if (!url.startsWith('http')) { url = 'https://' + url; }

Â  Â  try { new URL(url); } catch (_) { return res.status(400).json({ message: 'Das Format der URL ist ungÃ¼ltig.' }); }



Â  Â  if (url.includes('luqy.studio')) {

Â  Â  Â  Â  return res.status(200).json({ isSpecialCase: true, specialNote: "Diese Landing Page ist offensichtlich perfekt. ðŸ˜‰ Bereit fÃ¼r deine eigene?" });

Â  Â  }



Â  Â  const cacheKey = `cro-analysis-v5.3:${url}`;

Â  Â  try {

Â  Â  Â  Â  const cachedResult = await kv.get<any>(cacheKey);

Â  Â  Â  Â  if (cachedResult) { return res.status(200).json(cachedResult); }

Â  Â  } catch (error) { console.error("Vercel KV Cache-Fehler (Lesen):", error); }



Â  Â  try {

Â  Â  Â  Â  const pageContent = await getCleanedPageContent(url);

Â  Â  Â  Â Â 

Â  Â  Â  Â  // --- START: PROMPT MIT VERBESSERTER MOBILE-PRÃœFUNG ---

Â  Â  Â  Â  const prompt = `

Â  Â  Â  Â  Â  Â  Du bist ein Weltklasse Conversion-Optimierer. Deine Aufgabe ist es, den HTML-Code wie ein menschlicher Auditor zu prÃ¼fen und dabei aktiv nach Problemen zu suchen, insbesondere nach fehlenden Elementen.



Â  Â  Â  Â  Â  Â  DEIN PRÃœFAUFTRAG:

Â  Â  Â  Â  Â  Â  PrÃ¼fe den HTML-Code anhand der folgenden 11-Punkte-Checkliste. Identifiziere ALLE zutreffenden Probleme, zÃ¤hle sie und merke dir die ZWEI gravierendsten.



Â  Â  Â  Â  Â  Â  Checkliste:

Â  Â  Â  Â  Â  Â  1.Â  **Langsame Ladezeit:** Suche nach Indikatoren fÃ¼r eine langsame Seite (z.B. ungewÃ¶hnlich viele \`<img>\`- oder \`<script>\`-Tags).

Â  Â  Â  Â  Â  Â  2.Â  **Fehlende mobile Optimierung:** Ein fehlendes \`<meta name="viewport">\`-Tag ist ein starkes Warnsignal. Melde diesen Fehler aber nur, wenn du auch sonst keine Hinweise auf ein responsives Design findest (z.B. CSS-Klassen mit "mobile", "sm:", "md:", "lg:").

Â  Â  Â  Â  Â  Â  3.Â  **Unklare Value Proposition:** Ist der \`<h1>\`-Text vage, voller Jargon oder erklÃ¤rt er keinen klaren Kundennutzen?

Â  Â  Â  Â  Â  Â  4.Â  **"Message Match"-Fehler:** Weicht der \`<title>\` stark von der \`<h1>\`-Botschaft ab?

Â  Â  Â  Â  Â  Â  5.Â  **Fehlender/Schwacher CTA:** Fehlt ein klarer, aktiver Call-to-Action Button im oberen Bereich? Sind Button-Texte passiv?

Â  Â  Â  Â  Â  Â  6.Â  **Offensichtliche technische Fehler:** Gibt es Hinweise auf kaputte Bilder (\`src=""\`) oder fehlerhafte Links (\`href=""\`)?

Â  Â  Â  Â  Â  Â  7.Â  **Fehlende Vertrauenssignale:** Fehlen WÃ¶rter wie "Kundenstimmen", "Bewertungen", "Partner" oder Kundenlogos?

Â  Â  Â  Â  Â  Â  8.Â  **Zu viele Ablenkungen:** Gibt es eine \`<nav>\`-Leiste mit zu vielen ablenkenden Links (mehr als 4)?

Â  Â  Â  Â  Â  Â  9.Â  **Komplexes Formular:** Hat ein \`<form>\`-Element mehr als 4-5 \`<input>\`-Felder?

Â  Â  Â  Â  Â  Â  10. **Schlechte Lesbarkeit:** Gibt es extrem lange TextblÃ¶cke in \`<p>\`-Tags ohne AbsÃ¤tze/Formatierung?

Â  Â  Â  Â  Â  Â  11. **Aufdringliche Pop-ups:** Gibt es Hinweise auf sofortige Overlays (z.B. Elemente mit Texten wie "Angebot nicht verpassen")?



Â  Â  Â  Â  Â  Â  NACH DEINER ANALYSE:

Â  Â  Â  Â  Â  Â  Rufe zwingend das Werkzeug 'reportConversionKillers' auf, um deine Ergebnisse zu Ã¼bermitteln.



Â  Â  Â  Â  Â  Â  REGELN FÃœR DIE DETAILBESCHREIBUNG:

Â  Â  Â  Â  Â  Â  - **STRIKTES LIMIT: MAXIMAL 10 WÃ–RTER!**

Â  Â  Â  Â  Â  Â  - Muss das Problem kurz benennen und ein Zitat/Beispiel enthalten, ohne zu technisch zu werden.

Â  Â  Â  Â  Â  Â  - Titel mÃ¼ssen aus Nutzersicht formuliert sein.



Â  Â  Â  Â  Â  Â  ZU PRÃœFENDER HTML-CODE:

Â  Â  Â  Â  Â  Â  \`\`\`html

Â  Â  Â  Â  Â  Â  ${pageContent}

Â  Â  Â  Â  Â  Â  \`\`\`

Â  Â  Â  Â  `;

Â  Â  Â  Â  // --- ENDE: PROMPT MIT VERBESSERTER MOBILE-PRÃœFUNG ---



Â  Â  Â  Â  const tools = [{

Â  Â  Â  Â  Â  Â  function_declarations: [{

Â  Â  Â  Â  Â  Â  Â  Â  name: "reportConversionKillers",

Â  Â  Â  Â  Â  Â  Â  Â  description: "Ãœbermittelt die gefundenen Conversion-Killer einer Webseiten-Analyse.",

Â  Â  Â  Â  Â  Â  Â  Â  parameters: {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type: "OBJECT",

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required: ["totalFound", "topKillers"],

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  properties: {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  totalFound: { type: "NUMBER", description: "Die Gesamtzahl aller gefundenen Conversion-Killer." },

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  topKillers: {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type: "ARRAY",

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  description: "Eine Liste der Top 2 gravierendsten Conversion-Killer.",

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  items: {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type: "OBJECT",

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required: ["title", "detail"],

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  properties: {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title: { type: "STRING", description: "Der nutzerfreundliche Titel des Problems." },

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  detail: { type: "STRING", description: "Die SEHR KURZE Detailbeschreibung (maximal 10 WÃ¶rter) mit Zitat." }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  }]

Â  Â  Â  Â  }];



Â  Â  Â  Â  const apiResponse = await fetch(GEMINI_API_URL, {

Â  Â  Â  Â  Â  Â  method: 'POST',

Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },

Â  Â  Â  Â  Â  Â  body: JSON.stringify({

Â  Â  Â  Â  Â  Â  Â  Â  contents: [{ parts: [{ text: prompt }] }],

Â  Â  Â  Â  Â  Â  Â  Â  tools: tools,

Â  Â  Â  Â  Â  Â  }),

Â  Â  Â  Â  });



Â  Â  Â  Â  if (!apiResponse.ok) {

Â  Â  Â  Â  Â  Â  const errorBody = await apiResponse.text();

Â  Â  Â  Â  Â  Â  console.error("Fehler von der Gemini API:", errorBody);

Â  Â  Â  Â  Â  Â  throw new Error("Die KI-Analyse konnte nicht durchgefÃ¼hrt werden.");

Â  Â  Â  Â  }

Â  Â  Â  Â Â 

Â  Â  Â  Â  const responseData = await apiResponse.json();

Â  Â  Â  Â  const functionCall = responseData.candidates?.[0]?.content?.parts?.[0]?.functionCall;



Â  Â  Â  Â  if (!functionCall || functionCall.name !== 'reportConversionKillers') {

Â  Â  Â  Â  Â  Â  console.error("KI hat nicht das erwartete Werkzeug aufgerufen:", responseData);

Â  Â  Â  Â  Â  Â  if (!functionCall) {

Â  Â  Â  Â  Â  Â  Â  Â  Â const result = { isSpecialCase: true, specialNote: `GlÃ¼ckwunsch! Auf ${new URL(url).hostname} wurden keine gravierenden Conversion-Killer gefunden.` };

Â  Â  Â  Â  Â  Â  Â  Â  Â await kv.set(cacheKey, result, { ex: 259200 });

Â  Â  Â  Â  Â  Â  Â  Â  Â return res.status(200).json(result);

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  throw new Error("Die KI konnte keine strukturierte Analyse liefern.");

Â  Â  Â  Â  }

Â  Â  Â  Â Â 

Â  Â  Â  Â  const analysisResult = functionCall.args;

Â  Â  Â  Â Â 

Â  Â  Â  Â  const totalFound = analysisResult.totalFound || 0;

Â  Â  Â  Â  if (totalFound === 0) {

Â  Â  Â  Â  Â  Â  const result = { isSpecialCase: true, specialNote: `GlÃ¼ckwunsch! Auf ${new URL(url).hostname} wurden keine gravierenden Conversion-Killer gefunden.` };

Â  Â  Â  Â  Â  Â  await kv.set(cacheKey, result, { ex: 259200 });

Â  Â  Â  Â  Â  Â  return res.status(200).json(result);

Â  Â  Â  Â  }

Â  Â  Â  Â Â 

Â  Â  Â  Â  const topKillers = analysisResult.topKillers || [];

Â  Â  Â  Â  let topKillersToShow = [];

Â  Â  Â  Â  let message = "";

Â  Â  Â  Â Â 

Â  Â  Â  Â  if (totalFound < 4) {

Â  Â  Â  Â  Â  Â  topKillersToShow = topKillers.slice(0, 1);

Â  Â  Â  Â  Â  Â  const killerWord = totalFound === 1 ? 'potenzieller Conversion-Killer' : 'potenzielle Conversion-Killer';

Â  Â  Â  Â  Â  Â  message = `Gute Nachrichten! Auf ${new URL(url).hostname} wurde nur ${totalFound} ${killerWord} gefunden:`;

Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  topKillersToShow = topKillers.slice(0, 2);

Â  Â  Â  Â  Â  Â  message = `Auf ${new URL(url).hostname} wurden ${totalFound} potenzielle Conversion-Killer identifiziert:`;

Â  Â  Â  Â  }

Â  Â  Â  Â Â 

Â  Â  Â  Â  const finalResult = { message, topKillers: topKillersToShow, remainingKillers: Math.max(0, totalFound - topKillersToShow.length) };

Â  Â  Â  Â Â 

Â  Â  Â  Â  await kv.set(cacheKey, finalResult, { ex: 259200 });

Â  Â  Â  Â  await kv.set(`log:${new Date().toISOString()}:${url}`, { url, result: finalResult });

Â  Â  Â  Â Â 

Â  Â  Â  Â  return res.status(200).json(finalResult);



Â  Â  } catch (error) {

Â  Â  Â  Â  console.error("Allgemeiner Fehler im API-Handler:", error);

Â  Â  Â  Â  return res.status(500).json({ message: error.message || "Ein interner Serverfehler ist aufgetreten." });

Â  Â  }

}
